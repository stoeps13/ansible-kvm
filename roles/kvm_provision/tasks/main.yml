---
# tasks file for roles/kvm_provision
- name: Get VMs list
  community.libvirt.virt:
    command: list_vms
  register: existing_vms
  become: true
  changed_when: false

- name: Check if files exist
  ansible.builtin.stat:
    path: "{{ __libvirt_pool_dir }}/{{ item.name }}"
  register: file_status
  become: true
  with_items: "{{ __base_images }}"

- name: Print file_status
  ansible.builtin.debug:
    msg: "{{ file_status }}"

- name: Download files if they do not exist
  ansible.builtin.get_url:
    url: "{{ item.item.url }}/{{ item.item.name }}"
    dest: "{{ __libvirt_pool_dir }}/{{ item.item.name }}"
    mode: '644'
  become: true
  with_items: "{{ file_status.results }}"
  when: not item.stat.exists


- name: Check if virtual network is already configured
  community.libvirt.virt_net:
    command: list_nets
  register: networks
  become: true

- name: Copy network template to /tmp
  ansible.builtin.template:
    src: bridge.xml.j2
    dest: /tmp/bridge.xml
    mode: '777'
  when:
    __vm_network not in networks.list_nets

- name: Define a new network
  ansible.builtin.shell: |
    virsh net-define /tmp/bridge.xml
    virsh net-start {{ __vm_network }}
    virsh net-autostart {{ __vm_network }}
  become: true
  when:
    __vm_network not in networks.list_nets
  changed_when: false

- name: Check if network is configured and started
  community.libvirt.virt_net:
    state: active
    name: '{{ __vm_network }}'

- name: Create snapshot of cloud image
  ansible.builtin.shell: |
    qemu-img create -f qcow2 -b {{ __libvirt_pool_dir }}/{{ item.base_image }} -F qcow2 {{ __libvirt_pool_dir }}/{{ item.name }}.qcow2 {{ item.hdd1 }}G
  become: true
  with_items:
    - '{{ __virtual_machines }}'
  when: 'item.name not in existing_vms.list_vms'
  changed_when: false

- name: Create ISO source folder
  ansible.builtin.file:
    state: directory
    path: '/tmp/{{ item.name }}'
    mode: '755'
  with_items:
    - '{{ __virtual_machines }}'
  when: 'item.name not in existing_vms.list_vms'

- name: Copy Cloud Init user file
  ansible.builtin.template:
    src: cloud_init.cfg.j2
    dest: "/tmp/{{ item.name }}/user-data"
    mode: '644'
  with_items:
    - '{{ __virtual_machines }}'
  when: 'item.name not in existing_vms.list_vms'

- name: Copy Cloud Init meta file
  ansible.builtin.template:
    src: meta.cfg.j2
    dest: "/tmp/{{ item.name }}/meta-data"
    mode: '644'
  with_items:
    - '{{ __virtual_machines }}'
  when: 'item.name not in existing_vms.list_vms'

- name: Copy Cloud Init network file
  ansible.builtin.template:
    src: network.cfg.j2
    dest: "/tmp/{{ item.name }}/network-config"
    mode: '644'
  with_items:
    - '{{ __virtual_machines }}'
  when: 'item.name not in existing_vms.list_vms'

- name: Create ISO from Cloud Init files
  ansible.builtin.shell: |
    xorriso -as genisoimage -output {{ __libvirt_pool_dir }}/{{ item.name }}-cloudinit.iso -volid cidata -joliet -rock /tmp/{{ item.name }}/user-data /tmp/{{ item.name }}/meta-data /tmp/{{ item.name }}/network-config
  become: true
  with_items:
    - '{{ __virtual_machines }}'
  when: 'item.name not in existing_vms.list_vms'
  changed_when: false

- name: Create virtual machine
  ansible.builtin.shell: |
    virt-install --connect qemu:///system \
      --name "{{ item.name }}" \
      --memory "{{ item.mem * 1024 }}" \
      --machine q35 \
      --vcpus "{{ item.cpu }}" \
      --cpu host-passthrough \
      --network network="{{ __vm_network }}" \
      --import \
      --graphics spice \
      --osinfo name=almalinux9 \
      --disk "{{ __libvirt_pool_dir }}/{{ item.name }}.qcow2",cache=unsafe \
      --disk "{{ __libvirt_pool_dir }}/{{ item.name }}-cloudinit.iso",device=cdrom \
      --virt-type kvm
  become: true
  with_items:
    - '{{ __virtual_machines }}'
  when: 'item.name not in existing_vms.list_vms'
  changed_when: false

- name: Print virtual_machines
  ansible.builtin.debug:
    msg: "{{ __virtual_machines }}"

- name: Add servers to /etc/hosts
  ansible.builtin.lineinfile:
    path: '/etc/hosts'
    insertafter: 'EOF'
    line: "{{ item.ip }} {{ item.name }}.stoeps.home {{ item.name }}"
  become: true
  with_items:
    - '{{ __virtual_machines }}'
